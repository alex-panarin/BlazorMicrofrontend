@using Blazor.Loading.Services
@using Microsoft.Extensions.Logging
@using System.Security.Claims
@inject ILogger<App> Logger
@inject ILoadingService Service
@inject AuthenticationStateProvider Provider
<CascadingAuthenticationState>
<Router AppAssembly="@typeof(Program).Assembly" 
    AdditionalAssemblies="@Service.LoadedAssemblies" 
    OnNavigateAsync="@OnNavigateAsync"
    PreferExactMatches="@true">
    <Found Context="routeData">
        <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" >
            <NotAuthorized>
                Sorry, you are not allowed 
            </NotAuthorized>
        </AuthorizeRouteView>
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>
</CascadingAuthenticationState>

@code{
    private async Task OnNavigateAsync(NavigationContext context) 
    {
        try
        {
            // Get authenticated user and push the role like a key to find out layout to display
            var state = await Provider.GetAuthenticationStateAsync();
            var name = state.User?.Identity?.Name;
            if (! string.IsNullOrWhiteSpace(name))
            {
                Logger.LogInformation($"==> State : {name} <==");

                var key = state.User?.Claims
                    .Where(c => c.Type == ClaimTypes.Role)
                    .Select(c => c.Value)
                    .FirstOrDefault();

                if (string.IsNullOrWhiteSpace(key))
                    return;
                // Load assemblies
                await Service.Loading(key, Program.DefaultServiceProvider, Logger);
            }
            else
                Logger.LogInformation("==> State : Not Authenticated <==");
        }
        catch(Exception x)
        {
            Logger.LogError(x, "OnNavigateAsync Loading assembly");
        }
    }
}
